// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
let currentPage = 'home';
let isLoggedIn = false;
let currentUser = null;
let farmProjects = [];
let notifications = [];

// –°–∏—Å—Ç–µ–º–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–∏–º–∏—Ç–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö)
let users = [];
let userProjects = {};

// –î–∞–Ω–Ω—ã–µ –ø—Ä–æ–µ–∫—Ç–æ–≤
const projects = [
    {
        id: 1,
        name: "DeFi Yield",
        type: "DeFi",
        reward: "$10-$50",
        deadline: "15 –¥–Ω–µ–π",
        difficulty: "–õ–µ–≥–∫–æ",
        popular: 847,
        planted: false,
        progress: 0,
        icon: "üå±"
    },
    {
        id: 2,
        name: "NFT Drops",
        type: "NFT",
        reward: "$25-$100",
        deadline: "7 –¥–Ω–µ–π",
        difficulty: "–°—Ä–µ–¥–Ω–µ",
        popular: 623,
        planted: false,
        progress: 0,
        icon: "üå∏"
    },
    {
        id: 3,
        name: "GameFi Token",
        type: "GameFi",
        reward: "$5-$30",
        deadline: "21 –¥–µ–Ω—å",
        difficulty: "–õ–µ–≥–∫–æ",
        popular: 1205,
        planted: false,
        progress: 0,
        icon: "üåø"
    },
    {
        id: 4,
        name: "Staking Rewards",
        type: "DeFi",
        reward: "$15-$75",
        deadline: "10 –¥–Ω–µ–π",
        difficulty: "–°—Ä–µ–¥–Ω–µ",
        popular: 934,
        planted: false,
        progress: 0,
        icon: "üåæ"
    },
    {
        id: 5,
        name: "Meta NFT",
        type: "NFT",
        reward: "$20-$120",
        deadline: "5 –¥–Ω–µ–π",
        difficulty: "–°–ª–æ–∂–Ω–æ",
        popular: 512,
        planted: false,
        progress: 0,
        icon: "üé®"
    },
    {
        id: 6,
        name: "Play2Earn",
        type: "GameFi",
        reward: "$8-$40",
        deadline: "14 –¥–Ω–µ–π",
        difficulty: "–õ–µ–≥–∫–æ",
        popular: 1456,
        planted: false,
        progress: 0,
        icon: "üéÆ"
    }
];

// –ù–æ–≤–æ—Å—Ç–∏
const news = [
    {
        id: 1,
        title: "–ù–æ–≤—ã–π –∞–∏—Ä–¥—Ä–æ–ø DeFi –ø—Ä–æ–µ–∫—Ç–∞!",
        content: "–ü—Ä–æ–µ–∫—Ç Y –∑–∞–ø—É—Å—Ç–∏–ª –Ω–æ–≤—ã–π –∞–∏—Ä–¥—Ä–æ–ø —Å –Ω–∞–≥—Ä–∞–¥–æ–π –¥–æ $50! –£—Å–ø–µ–π—Ç–µ –ø—Ä–∏–Ω—è—Ç—å —É—á–∞—Å—Ç–∏–µ.",
        time: "2 —á–∞—Å–∞ –Ω–∞–∑–∞–¥"
    },
    {
        id: 2,
        title: "–û—Å—Ç–∞–ª–æ—Å—å 3 –¥–Ω—è!",
        content: "–î–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∞–∏—Ä–¥—Ä–æ–ø–∞ –ø—Ä–æ–µ–∫—Ç–∞ Z –æ—Å—Ç–∞–ª–æ—Å—å –≤—Å–µ–≥–æ 3 –¥–Ω—è. –ù–µ —É–ø—É—Å—Ç–∏—Ç–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å!",
        time: "5 —á–∞—Å–æ–≤ –Ω–∞–∑–∞–¥"
    },
    {
        id: 3,
        title: "–ù–æ–≤–∞—è –∏–≥—Ä–∞ –≤ GameFi!",
        content: "–ó–∞–ø—É—â–µ–Ω–∞ –Ω–æ–≤–∞—è –±–ª–æ–∫—á–µ–π–Ω-–∏–≥—Ä–∞ —Å —Ç–æ–∫–µ–Ω–∞–º–∏ –Ω–∞–≥—Ä–∞–¥. –†–∞–Ω–Ω–µ–µ —É—á–∞—Å—Ç–∏–µ –¥–∞—ë—Ç –±–æ–Ω—É—Å—ã!",
        time: "1 –¥–µ–Ω—å –Ω–∞–∑–∞–¥"
    },
    {
        id: 4,
        title: "NFT –∫–æ–ª–ª–µ–∫—Ü–∏—è –≥–æ—Ç–æ–≤–∞!",
        content: "–ü–æ–ø—É–ª—è—Ä–Ω–∞—è NFT –∫–æ–ª–ª–µ–∫—Ü–∏—è –≥–æ—Ç–æ–≤–∏—Ç—Å—è –∫ –º–∏–Ω—Ç—É. Whitelisted –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –ø–æ–ª—É—á–∞—Ç —Å–∫–∏–¥–∫—É.",
        time: "2 –¥–Ω—è –Ω–∞–∑–∞–¥"
    }
];

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
document.addEventListener('DOMContentLoaded', function() {
    loadFromStorage();
    initializeApp();
    setupEventListeners();
    startProgressUpdater();
});

function initializeApp() {
    renderPopularProjects();
    renderNews();
    renderStoreProjects();
    updateFarmStats();
    renderFarmProjects();
    renderFullNewsList();
}

function setupEventListeners() {
    // –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
    document.getElementById('login-btn').addEventListener('click', handleLogin);
    document.getElementById('register-btn').addEventListener('click', handleRegister);
    document.getElementById('show-register').addEventListener('click', showRegisterForm);
    document.getElementById('show-login').addEventListener('click', showLoginForm);
    document.getElementById('logout-btn').addEventListener('click', logout);
    
    // –ù–∞–≤–∏–≥–∞—Ü–∏—è
    document.querySelectorAll('.nav-btn').forEach(btn => {
        btn.addEventListener('click', function() {
            const page = this.dataset.page;
            showPage(page);
        });
    });
    
    // –§–∏–ª—å—Ç—Ä—ã –≤ –≤–∏—Ç—Ä–∏–Ω–µ
    document.querySelectorAll('.filter-btn').forEach(btn => {
        btn.addEventListener('click', function() {
            const filter = this.dataset.filter;
            filterProjects(filter);
            
            document.querySelectorAll('.filter-btn').forEach(b => b.classList.remove('active'));
            this.classList.add('active');
        });
    });
}

function handleLogin() {
    const email = document.getElementById('login-email').value;
    const password = document.getElementById('login-password').value;
    
    if (!email || !password) {
        showNotification('–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è!');
        return;
    }
    
    const user = users.find(u => u.email === email && u.password === password);
    if (user) {
        loginUser(user);
    } else {
        showNotification('–ù–µ–≤–µ—Ä–Ω—ã–π email –∏–ª–∏ –ø–∞—Ä–æ–ª—å!');
    }
}

function handleRegister() {
    const name = document.getElementById('register-name').value;
    const email = document.getElementById('register-email').value;
    const password = document.getElementById('register-password').value;
    const confirmPassword = document.getElementById('register-confirm').value;
    
    if (!name || !email || !password || !confirmPassword) {
        showNotification('–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è!');
        return;
    }
    
    if (password !== confirmPassword) {
        showNotification('–ü–∞—Ä–æ–ª–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç!');
        return;
    }
    
    if (users.find(u => u.email === email)) {
        showNotification('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º email —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!');
        return;
    }
    
    const newUser = {
        id: Date.now(),
        name: name,
        email: email,
        password: password,
        createdAt: Date.now()
    };
    
    users.push(newUser);
    userProjects[newUser.id] = [];
    saveToStorage();
    
    loginUser(newUser);
}

function loginUser(user) {
    currentUser = user;
    isLoggedIn = true;
    farmProjects = userProjects[user.id] || [];
    
    document.getElementById('auth-section').classList.add('hidden');
    document.getElementById('main-content').classList.remove('hidden');
    document.getElementById('navigation').classList.remove('hidden');
    document.getElementById('current-user-name').textContent = user.name;
    
    updateFarmStats();
    renderFarmProjects();
    showNotification(`–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, ${user.name}! üéâ`);
}

function logout() {
    saveUserProgress();
    currentUser = null;
    isLoggedIn = false;
    farmProjects = [];
    
    document.getElementById('auth-section').classList.remove('hidden');
    document.getElementById('main-content').classList.add('hidden');
    document.getElementById('navigation').classList.add('hidden');
    
    showPage('home');
    showNotification('–í—ã –≤—ã—à–ª–∏ –∏–∑ —Å–∏—Å—Ç–µ–º—ã');
}

function showRegisterForm() {
    document.getElementById('login-form').classList.add('hidden');
    document.getElementById('register-form').classList.remove('hidden');
}

function showLoginForm() {
    document.getElementById('register-form').classList.add('hidden');
    document.getElementById('login-form').classList.remove('hidden');
}

function showPage(page) {
    // –°–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    document.querySelectorAll('.page').forEach(p => p.classList.remove('active'));
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω—É–∂–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
    document.getElementById(page + '-page').classList.add('active');
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—É—é –∫–Ω–æ–ø–∫—É –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    document.querySelectorAll('.nav-btn').forEach(btn => btn.classList.remove('active'));
    document.querySelector(`[data-page="${page}"]`).classList.add('active');
    
    currentPage = page;
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    if (page === 'farm') {
        updateFarmStats();
        renderFarmProjects();
    }
}

function renderPopularProjects() {
    const container = document.getElementById('popular-projects');
    const topProjects = projects.slice(0, 3);
    
    container.innerHTML = topProjects.map(project => `
        <div class="project-card">
            <div class="text-center">
                <div class="project-icon">${project.icon}</div>
                <h3 class="project-name">${project.name}</h3>
                <span class="project-type">${project.type}</span>
            </div>
            <div class="project-info">
                <div class="project-info-row">
                    <span class="project-info-label">–ù–∞–≥—Ä–∞–¥–∞:</span>
                    <span class="project-info-value project-reward">${project.reward}</span>
                </div>
                <div class="project-info-row">
                    <span class="project-info-label">–ü–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç—å:</span>
                    <span class="project-info-value project-popularity">${project.popular}</span>
                </div>
            </div>
        </div>
    `).join('');
}

function renderNews() {
    const container = document.getElementById('news-list');
    const topNews = news.slice(0, 2);
    
    container.innerHTML = topNews.map(item => `
        <div class="news-item">
            <h4 class="news-title">${item.title}</h4>
            <p class="news-content">${item.content}</p>
            <p class="news-time">${item.time}</p>
        </div>
    `).join('');
}

function renderStoreProjects() {
    const container = document.getElementById('store-projects');
    
    container.innerHTML = projects.map(project => `
        <div class="project-card" data-type="${project.type.toLowerCase()}">
            <div class="text-center">
                <div class="project-icon">${project.icon}</div>
                <h3 class="project-name">${project.name}</h3>
                <span class="project-type">${project.type}</span>
            </div>
            <div class="project-info">
                <div class="project-info-row">
                    <span class="project-info-label">–ù–∞–≥—Ä–∞–¥–∞:</span>
                    <span class="project-info-value project-reward">${project.reward}</span>
                </div>
                <div class="project-info-row">
                    <span class="project-info-label">–î–µ–¥–ª–∞–π–Ω:</span>
                    <span class="project-info-value">${project.deadline}</span>
                </div>
                <div class="project-info-row">
                    <span class="project-info-label">–°–ª–æ–∂–Ω–æ—Å—Ç—å:</span>
                    <span class="project-info-value">${project.difficulty}</span>
                </div>
                <div class="project-info-row">
                    <span class="project-info-label">–ü–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç—å:</span>
                    <span class="project-info-value project-popularity">${project.popular}</span>
                </div>
            </div>
            <button class="btn-secondary" onclick="plantProject(${project.id})" style="width: 100%;">
                üå± –ü–æ—Å–∞–¥–∏—Ç—å
            </button>
        </div>
    `).join('');
}

function filterProjects(filter) {
    const cards = document.querySelectorAll('#store-projects .project-card');
    
    cards.forEach(card => {
        if (filter === 'all' || card.dataset.type === filter) {
            card.style.display = 'block';
        } else {
            card.style.display = 'none';
        }
    });
}

function plantProject(projectId) {
    if (!isLoggedIn) {
        showNotification('–í–æ–π–¥–∏—Ç–µ –≤ —Å–∏—Å—Ç–µ–º—É –¥–ª—è –ø–æ—Å–∞–¥–∫–∏ –ø—Ä–æ–µ–∫—Ç–æ–≤!');
        return;
    }
    
    const project = projects.find(p => p.id === projectId);
    
    if (project) {
        showProjectModal(project);
    }
}
       
function saveUserProgress() {
    if (currentUser && isLoggedIn) {
        userProjects[currentUser.id] = farmProjects;
        saveToStorage();
    }
}

function saveToStorage() {
    // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—ã–ª –±—ã API –∑–∞–ø—Ä–æ—Å
    const data = {
        users: users,
        userProjects: userProjects
    };
    console.log('–î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã:', data);
}

function loadFromStorage() {
    // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—ã–ª–∞ –±—ã –∑–∞–≥—Ä—É–∑–∫–∞ –∏–∑ API
    // –î–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ —Å–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if (users.length === 0) {
        const testUser = {
            id: 1,
            name: '–¢–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å',
            email: 'test@example.com',
            password: '123456',
            createdAt: Date.now()
        };
        users.push(testUser);
        userProjects[testUser.id] = [];
    }
}

function harvestProject(projectId) {
    const projectIndex = farmProjects.findIndex(p => p.id === projectId);
    
    if (projectIndex !== -1) {
        const project = farmProjects[projectIndex];
        const reward = Math.floor(Math.random() * 40) + 10;
        
        farmProjects.splice(projectIndex, 1);
        updateFarmStats();
        renderFarmProjects();
        
        showNotification(`–£—Ä–æ–∂–∞–π —Å–æ–±—Ä–∞–Ω! –ü–æ–ª—É—á–µ–Ω–æ ${reward} —Ç–æ–∫–µ–Ω–æ–≤ –æ—Ç "${project.name}" üéØ`);
    }
}

function updateFarmStats() {
    const projectsCount = farmProjects.length;
    const readyCount = farmProjects.filter(p => p.progress >= 100).length;
    
    document.getElementById('projects-count').textContent = projectsCount;
    document.getElementById('ready-count').textContent = readyCount;
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º/—Å–∫—Ä—ã–≤–∞–µ–º –ø—É—Å—Ç–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    const emptyState = document.getElementById('empty-farm');
    const farmProjectsContainer = document.getElementById('farm-projects');
    
    if (projectsCount === 0) {
        emptyState.style.display = 'block';
        farmProjectsContainer.style.display = 'none';
    } else {
        emptyState.style.display = 'none';
        farmProjectsContainer.style.display = 'grid';
    }
}

function renderFarmProjects() {
    const container = document.getElementById('farm-projects');
    
    container.innerHTML = farmProjects.map(project => `
        <div class="project-card">
            <div class="text-center">
                <div class="project-icon">${project.icon}</div>
                <h3 class="project-name">${project.name}</h3>
            </div>
            <div class="progress-info">
                <span class="project-info-label">–ü—Ä–æ–≥—Ä–µ—Å—Å:</span>
                <span class="project-info-value">${Math.round(project.progress)}%</span>
            </div>
            <div class="progress-bar">
                <div class="progress-fill" style="width: ${project.progress}%"></div>
            </div>
            <div class="text-center">
                ${project.progress >= 100 ? 
                    `<button class="btn-harvest" onclick="harvestProject(${project.id})">
                        üéØ –°–æ–±—Ä–∞—Ç—å —É—Ä–æ–∂–∞–π
                    </button>` :
                    `<div class="progress-status">
                        ${getProgressStatus(project.progress)}
                    </div>`
                }
            </div>
        </div>
    `).join('');
}

function getProgressStatus(progress) {
    if (progress < 25) return "üå± –ü—Ä–æ—Ä–∞—Å—Ç–∞–µ—Ç...";
    if (progress < 50) return "üåø –†–∞—Å—Ç—ë—Ç...";
    if (progress < 75) return "üåæ –°–æ–∑—Ä–µ–≤–∞–µ—Ç...";
    return "üéØ –ü–æ—á—Ç–∏ –≥–æ—Ç–æ–≤!";
}

function renderFullNewsList() {
    const container = document.getElementById('news-full-list');
    
    container.innerHTML = news.map(item => `
        <div class="news-card">
            <div class="news-card-header">
                <h2 class="news-card-title">${item.title}</h2>
                <button class="btn-copy" onclick="shareNews(${item.id})">
                    <i class="fab fa-twitter"></i>
                </button>
            </div>
            <p class="news-card-content">${item.content}</p>
            <div class="news-card-footer">
                <span class="news-card-time">${item.time}</span>
                <button class="news-card-btn">–ü–æ–¥—Ä–æ–±–Ω–µ–µ</button>
            </div>
        </div>
    `).join('');
}

function shareNews(newsId) {
    const newsItem = news.find(n => n.id === newsId);
    if (newsItem) {
        showNotification(`–ù–æ–≤–æ—Å—Ç—å "${newsItem.title}" —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∞ –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏! üì¢`);
    }
}

function copyReferralLink() {
    const input = document.getElementById('referral-link');
    input.select();
    input.setSelectionRange(0, 99999);
    
    try {
        document.execCommand('copy');
        showNotification('–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∞! üìã');
    } catch (err) {
        showNotification('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Å—Å—ã–ª–∫—É');
    }
}

function startProgressUpdater() {
    setInterval(() => {
        let updated = false;
        
        farmProjects.forEach(project => {
            if (project.progress < 100) {
                project.progress = Math.min(100, project.progress + Math.random() * 2);
                updated = true;

if (updated && currentPage === 'farm') {
            updateFarmStats();
            renderFarmProjects();
            saveUserProgress();
        }
            }
        });
        
    }, 3000);
}

function showNotification(message) {
    const notificationsContainer = document.getElementById('notifications');
    const notification = document.createElement('div');
    notification.className = 'notification';
    notification.textContent = message;
    
    notificationsContainer.appendChild(notification);
    
    // –£–¥–∞–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 4 —Å–µ–∫—É–Ω–¥—ã
    setTimeout(() => {
        notification.remove();
    }, 4000);
}

function showProjectModal(project) {
    document.getElementById('modal-project-name').textContent = project.name;
    document.getElementById('modal-project-icon').textContent = project.icon;
    document.getElementById('modal-project-reward').textContent = project.reward;
    document.getElementById('modal-project-deadline').textContent = project.deadline;
    document.getElementById('modal-project-difficulty').textContent = project.difficulty;
    
    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–Ω–æ–ø–∫–∏ –ø–µ—Ä–µ—Ö–æ–¥–∞ –Ω–∞ —Å–∞–π—Ç
    const linkBtn = document.getElementById('modal-project-link');
    linkBtn.onclick = () => {
        window.open('https://example.com/airdrop?ref=cryptofarm', '_blank');
    };
    
    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–Ω–æ–ø–∫–∏ –ø–æ—Å–∞–¥–∫–∏
    const plantBtn = document.getElementById('modal-plant-btn');
    plantBtn.onclick = () => {
        confirmPlantProject(project);
    };
    
    document.getElementById('project-modal').classList.remove('hidden');
}

function closeProjectModal() {
    document.getElementById('project-modal').classList.add('hidden');
    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —á–µ–∫–±–æ–∫—Å—ã
    document.querySelectorAll('#modal-checklist input[type="checkbox"]').forEach(cb => {
        cb.checked = false;
    });
}

function confirmPlantProject(project) {
    if (!farmProjects.find(fp => fp.id === project.id)) {
        const plantedProject = {
            ...project,
            planted: true,
            progress: 0,
            plantedAt: Date.now()
        };
        
        farmProjects.push(plantedProject);
        updateFarmStats();
        renderFarmProjects();
        
        showNotification(`–ü—Ä–æ–µ–∫—Ç "${project.name}" —É—Å–ø–µ—à–Ω–æ –ø–æ—Å–∞–∂–µ–Ω! üå±`);
        saveUserProgress();
        
        // –°–∏–º—É–ª—è—Ü–∏—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –ø–æ –ø–∞—Ä—Ç–Ω–µ—Ä—Å–∫–æ–π —Å—Å—ã–ª–∫–µ
        window.open('https://example.com/airdrop?ref=cryptofarm', '_blank');
        closeProjectModal();
    } else {
        showNotification('–ü—Ä–æ–µ–∫—Ç —É–∂–µ –ø–æ—Å–∞–∂–µ–Ω –Ω–∞ —Ñ–µ—Ä–º–µ!');
    }
}

// –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è UX

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∏–∫–æ–≤ –≤–Ω–µ –æ–±–ª–∞—Å—Ç–∏
document.addEventListener('click', function(e) {
    // –ó–∞–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω—ã–µ –æ–∫–Ω–∞ –ø—Ä–∏ –∫–ª–∏–∫–µ –≤–Ω–µ –∏—Ö –æ–±–ª–∞—Å—Ç–∏
    if (e.target.classList.contains('modal-overlay')) {
        closeModal();
    }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –∫–ª–∞–≤–∏—à
document.addEventListener('keydown', function(e) {
    if (e.key === 'Escape') {
        closeModal();
    }
});

function closeModal() {
    // –ó–∞–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ –º–æ–¥–∞–ª—å–Ω—ã–µ –æ–∫–Ω–∞
    document.querySelectorAll('.modal').forEach(modal => {
        modal.classList.add('hidden');
    });
    closeProjectModal();
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–∏ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
function animateOnLoad() {
    const cards = document.querySelectorAll('.project-card');
    cards.forEach((card, index) => {
        setTimeout(() => {
            card.style.opacity = '0';
            card.style.transform = 'translateY(20px)';
            card.style.transition = 'all 0.5s ease';
            
            setTimeout(() => {
                card.style.opacity = '1';
                card.style.transform = 'translateY(0)';
            }, 100);
        }, index * 100);
    });
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –≤ localStorage (–µ—Å–ª–∏ –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è)
function saveState() {
    const state = {
        farmProjects: farmProjects,
        isLoggedIn: isLoggedIn,
        currentPage: currentPage
    };
    
    // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—ã–ª –±—ã localStorage
    console.log('–°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ:', state);
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è
function loadState() {
    // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—ã–ª–∞ –±—ã –∑–∞–≥—Ä—É–∑–∫–∞ –∏–∑ localStorage
    console.log('–°–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ');
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
function checkConnection() {
    return navigator.onLine;
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –æ—Ñ–ª–∞–π–Ω/–æ–Ω–ª–∞–π–Ω —Ä–µ–∂–∏–º–∞
window.addEventListener('online', function() {
    showNotification('–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ! üåê');
});

window.addEventListener('offline', function() {
    showNotification('–ù–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–æ–º ‚ö†Ô∏è');
});

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–µ–±–∞—É–Ω—Å–∞ (–¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏)
function debounce(func, wait) {
    let timeout;
    return function executedFunction(...args) {
        const later = () => {
            clearTimeout(timeout);
            func(...args);
        };
        clearTimeout(timeout);
        timeout = setTimeout(later, wait);
    };
}

// –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–∏—Å–∫–∞
const debouncedSearch = debounce(function(query) {
    // –õ–æ–≥–∏–∫–∞ –ø–æ–∏—Å–∫–∞ –ø—Ä–æ–µ–∫—Ç–æ–≤
    console.log('–ü–æ–∏—Å–∫:', query);
}, 300);

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö
function validateProject(project) {
    return project && 
           typeof project.id === 'number' && 
           typeof project.name === 'string' && 
           typeof project.type === 'string' &&
           typeof project.reward === 'string' &&
           typeof project.deadline === 'string' &&
           typeof project.difficulty === 'string' &&
           typeof project.popular === 'number';
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏
function formatTime(timestamp) {
    const now = Date.now();
    const diff = now - timestamp;
    
    const minutes = Math.floor(diff / (1000 * 60));
    const hours = Math.floor(diff / (1000 * 60 * 60));
    const days = Math.floor(diff / (1000 * 60 * 60 * 24));
    
    if (minutes < 60) {
        return `${minutes} –º–∏–Ω –Ω–∞–∑–∞–¥`;
    } else if (hours < 24) {
        return `${hours} —á –Ω–∞–∑–∞–¥`;
    } else {
        return `${days} –¥–Ω –Ω–∞–∑–∞–¥`;
    }
}

// –≠–∫—Å–ø–æ—Ä—Ç —Ñ—É–Ω–∫—Ü–∏–π –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (–≤ —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏)
if (typeof module !== 'undefined' && module.exports) {
    module.exports = {
        plantProject,
        harvestProject,
        showNotification,
        validateProject,
        formatTime
    };
}
